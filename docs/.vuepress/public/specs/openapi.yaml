openapi: 3.0.3
info:
  title: S1Seven API
  description: Microservices bundled APIs
  version: 0.1.0
  contact: {}
servers:
  - url: https://app.s1seven.ovh
  - url: https://app.s1seven.dev
externalDocs:
  description: Platform docs
  url: ../
security:
  - bearer: []
  - Authentication: []
  - Refresh: []
tags:
  - name: auth
    description: Manage JWT token to access protected endpoints.
  - name: sessions
    description: Manage user sessions.
  - name: accesstoken
    description: Manage company access tokens.
  - name: Service
    description: Display microservice credentials.
  - name: users
    description: Users registered on S1Seven platform.
  - name: companies
    description: Companies registered on S1Seven platform.
  - name: devices
    description: Devices registered on S1Seven platform..
  - name: cointypes
    description: Managing coin types and their addresses for the different accounts.
  - name: nodes
    description: The DLT full nodes that are registered and used with the solution.
  - name: wallet
    description: >-
      A company's wallet needs an initial random input to start operationg in a
      individual and private way.
  - name: identities
    description: >-
      The concept of identities is used to derive different key pair for various
      purposes. An identity can represent a legal entity or a device and may
      contain all supported and enabled cointypes of the system. 
            In general, a list of all enabled identites can be retrieved by their owner. Single identity can be created, disabled & enabled, and of course the contained coinaddress / publickey can be retrieved.
  - name: transactions
    description: Transaction trackers.
  - name: certificates
    description: Certificate handlers
  - name: hooks
    description: Registered hooks used to trigger events
  - name: mailhooks
    description: Registered hooks used to trigger emails
paths:
  /sessions:
    get:
      operationId: SessionsController_show
      summary: 'Display sessions - Scope : sessions:read_many'
      description: Display user sessions
      parameters: []
      responses:
        '200':
          description: List of devices logged in
          content:
            application/json:
              schema:
                type: array
                items: &ref_0
                  type: object
                  properties:
                    id:
                      type: string
                      description: Session's storage id
                    userId:
                      type: string
                      description: Session's user id
                    jwtId:
                      type: string
                      description: Access token JWT id
                    loggedInAt:
                      format: date-time
                      type: string
                      description: When session was logged in
                    current:
                      type: boolean
                      description: Session is active
                      default: false
                    device:
                      type: string
                      description: User agent
                    ipAddress:
                      type: string
                      description: User agent IP address
                  required:
                    - id
                    - userId
                    - jwtId
                    - device
                    - ipAddress
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema: &ref_1
                type: object
                properties:
                  statusCode:
                    type: number
                    description: The error status code
                    example: 400
                  path:
                    type: string
                    description: The path on which the error was generated
                    example:
                      - auth/login
                      - 'AUTH_SERVICE/live/auth/read_one '
                  timestamp:
                    type: string
                    description: The date on which the error was generated
                    example: '2021-10-05T14:48:00.000Z'
                  message:
                    description: The error message
                    oneOf:
                      - type: string
                      - type: object
                      - type: array
                        items:
                          type: object
                required:
                  - statusCode
                  - path
                  - timestamp
                  - message
      tags:
        - sessions
      security:
        - bearer: []
    delete:
      operationId: SessionsController_deleteAll
      summary: 'Revoke user session - Scope : sessions:delete_all'
      description: Revoke user sessions
      parameters: []
      responses:
        '200':
          description: List of devices logged in
          content:
            application/json:
              schema:
                type: array
                items: *ref_0
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema: *ref_1
      tags:
        - sessions
      security:
        - bearer: []
  /sessions/{sessionId}:
    delete:
      operationId: SessionsController_deleteOne
      summary: 'Revoke user session - Scope : sessions:delete_one'
      description: Revoke a user session
      parameters:
        - name: sessionId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Device logged in
          content:
            application/json:
              schema: *ref_0
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema: *ref_1
      tags:
        - sessions
      security:
        - bearer: []
  /auth/login:
    post:
      operationId: AuthController_login
      summary: Login user
      description: Login with user credentials
      parameters: []
      requestBody:
        required: true
        description: User credentials
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                  minLength: 8
              required:
                - password
      responses:
        '200':
          description: Access token, refresh token and the user Id
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                required:
                  - userId
                  - accessToken
                  - refreshToken
        '401':
          description: Wrong credentials
          content:
            application/json:
              schema: *ref_1
      tags:
        - auth
  /auth/logout:
    post:
      operationId: AuthController_logOut
      summary: Logout user
      description: Logout with user's JWT
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
      tags:
        - auth
      security:
        - bearer: []
  /auth/inspect:
    post:
      operationId: AuthController_inspect
      summary: 'Inspect JWT - Scope : auth:read_one'
      description: Return JWT token inspection
      parameters:
        - name: audience
          in: header
          description: Auth service audience
          required: false
          schema:
            type: string
      responses:
        '201':
          description: Token inspection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InspectTokenDto'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema: *ref_1
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - auth
      security:
        - bearer: []
        - Authentication: []
  /auth/refresh:
    get:
      operationId: AuthController_refresh
      summary: 'Refresh JWT - Scope : auth:create_one'
      description: Return refreshed JWT
      parameters: []
      responses:
        '200':
          description: JWT from an existing valid refresh token
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                  accessToken:
                    type: string
                required:
                  - userId
                  - accessToken
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema: *ref_1
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - auth
      security:
        - Refresh: []
  /auth/revoke:
    post:
      operationId: AuthController_revoke
      summary: 'Revoke JWT - Scope : auth:revoke'
      description: Return revoked JWT
      parameters:
        - name: audience
          in: header
          description: Auth service audience
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Revoked token
          content:
            application/json:
              schema: &ref_37
                type: object
                properties:
                  id:
                    type: string
                    description: Revoked JWT storage id
                  jwtId:
                    type: string
                    description: JWT id
                  audience:
                    type: string
                    description: JWT audience
                  issuedAt:
                    type: number
                    description: JWT creation timestamp in seconds
                  expiresIn:
                    type: number
                    description: JWT expiration timestamp in seconds
                required:
                  - id
                  - jwtId
                  - audience
                  - issuedAt
                  - expiresIn
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema: *ref_1
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - auth
      security:
        - bearer: []
  /accesstoken:
    post:
      operationId: AccessTokensController_create
      summary: 'Return JWT token and payload - Scope : accesstoken:create_one'
      description: Generate Access Token scoped to a given company
      parameters:
        - name: mode
          required: true
          in: query
          description: Restrict mode in which token can be used
          schema:
            enum:
              - live
              - test
            type: string
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Custom scopes that will be contained in JWT
        content:
          application/json:
            schema: &ref_2
              type: object
              properties:
                auth:
                  type: object
                  description: auth endpoints
                  properties:
                    actions:
                      type: array
                      items:
                        type: string
                        enum:
                          - read_one
                          - create_one
                          - sign_in
                          - sign_out
                          - revoke
                  additionalProperties: false
                accesstoken:
                  type: object
                  description: accesstoken endpoints
                  properties:
                    actions:
                      type: array
                      items:
                        type: string
                        enum:
                          - create_one
                          - read_one
                          - read_many
                          - update_one
                          - delete_one
                  additionalProperties: false
                sessions:
                  type: object
                  description: sessions endpoints
                  properties:
                    actions:
                      type: array
                      items:
                        type: string
                        enum:
                          - read_one
                          - read_many
                          - create_one
                          - revoke
                          - delete_one
                          - delete_all
                  additionalProperties: false
                cointypes:
                  type: object
                  description: cointypes endpoints
                  properties:
                    actions:
                      type: array
                      items:
                        type: string
                        enum:
                          - read_one
                          - read_many
                          - create_one
                          - update_one
                          - delete_one
                          - '*'
                  additionalProperties: false
                nodes:
                  type: object
                  description: nodes endpoints
                  properties:
                    actions:
                      type: array
                      items:
                        type: string
                        enum:
                          - read_one
                          - read_many
                          - create_one
                          - update_one
                          - delete_one
                          - '*'
                  additionalProperties: false
                masterkey:
                  type: object
                  description: masterkey endpoints
                  properties:
                    actions:
                      type: array
                      items:
                        type: string
                        enum:
                          - create_one
                          - update_one
                  additionalProperties: false
                wallet:
                  type: object
                  description: wallet endpoints
                  properties:
                    actions:
                      type: array
                      items:
                        type: string
                        enum:
                          - read_many
                          - read_one
                          - create_one
                          - update_one
                          - delete_one
                  additionalProperties: false
                identities:
                  type: object
                  description: identities endpoints
                  properties:
                    actions:
                      type: array
                      items:
                        type: string
                        enum:
                          - read_many
                          - read_one
                          - create_one
                          - update_one
                          - delete_one
                          - '*'
                  additionalProperties: false
                transactions:
                  type: object
                  description: transactions endpoints
                  properties:
                    actions:
                      type: array
                      items:
                        type: string
                        enum:
                          - read_one
                          - read_many
                          - partial_sign
                          - send
                          - sign
                  additionalProperties: false
                users:
                  type: object
                  description: users endpoints
                  properties:
                    actions:
                      type: array
                      items:
                        type: string
                        enum:
                          - read_many
                          - read_one
                          - create_one
                          - update_one
                          - delete_one
                          - confirm
                          - reset
                          - '*'
                  additionalProperties: false
                companies:
                  type: object
                  description: companies endpoints
                  properties:
                    actions:
                      type: array
                      items:
                        type: string
                        enum:
                          - read_many
                          - read_one
                          - validate_one
                          - create_one
                          - update_one
                          - delete_one
                          - confirm
                          - '*'
                  additionalProperties: false
                devices:
                  type: object
                  description: devices endpoints
                  properties:
                    actions:
                      type: array
                      items:
                        type: string
                        enum:
                          - read_many
                          - read_one
                          - create_one
                          - update_one
                          - delete_one
                          - confirm
                          - '*'
                  additionalProperties: false
                certificates:
                  type: object
                  description: certificates endpoints
                  properties:
                    actions:
                      type: array
                      items:
                        type: string
                        enum:
                          - read_one
                          - read_many
                          - create_one
                          - create_many
                          - update_one
                          - validate_one
                          - validate_many
                          - render_one
                          - render_many
                          - sign
                          - notarize_one
                          - notarize_many
                  additionalProperties: false
                hooks:
                  type: object
                  description: hooks endpoints
                  properties:
                    actions:
                      type: array
                      items:
                        type: string
                        enum:
                          - read_many
                          - read_one
                          - create_one
                          - update_one
                          - delete_one
                  additionalProperties: false
                events:
                  type: object
                  description: events endpoints
                  properties:
                    actions:
                      type: array
                      items:
                        type: string
                        enum:
                          - read_many
                          - read_one
                          - send
                  additionalProperties: false
                mailhooks:
                  type: object
                  description: mailhooks endpoints
                  properties:
                    actions:
                      type: array
                      items:
                        type: string
                        enum:
                          - create_one
                          - update_one
                          - delete_one
                          - read_many
                          - read_one
                  additionalProperties: false
                mails:
                  type: object
                  description: mails endpoints
                  properties:
                    actions:
                      type: array
                      items:
                        type: string
                        enum:
                          - read_many
                          - read_one
                          - send
                  additionalProperties: false
              required:
                - auth
                - users
      responses:
        '201':
          description: JWT token and payload
          content:
            application/json:
              schema: &ref_4
                type: object
                properties:
                  id:
                    type: string
                    description: Revoked JWT storage id
                  companyId:
                    type: string
                    description: Access token owner
                  jwtId:
                    type: string
                    description: JWT id
                  audience:
                    type: string
                    description: JWT audience
                  issuedAt:
                    type: number
                    description: JWT creation timestamp in seconds
                  expiresIn:
                    type: number
                    description: JWT expiration timestamp in seconds
                  scopes:
                    description: JWT scopes
                    allOf:
                      - *ref_2
                  mode:
                    description: Mode in which this token is resctricted
                    example: test
                    type: string
                    enum: &ref_3
                      - live
                      - test
                  jwt:
                    type: string
                    description: JWT
                required:
                  - id
                  - companyId
                  - jwtId
                  - audience
                  - issuedAt
                  - expiresIn
                  - mode
                  - jwt
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema: *ref_1
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - accesstoken
      security:
        - bearer: []
    get:
      operationId: AccessTokensController_find
      summary: 'Return access token list - Scope : accesstoken:read_many'
      description: Find Access Tokens owned by the selected company
      parameters:
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Access token list
          content:
            application/json:
              schema:
                type: array
                items: &ref_5
                  type: object
                  properties:
                    id:
                      type: string
                      description: Revoked JWT storage id
                    companyId:
                      type: string
                      description: Access token owner
                    jwtId:
                      type: string
                      description: JWT id
                    audience:
                      type: string
                      description: JWT audience
                    issuedAt:
                      type: number
                      description: JWT creation timestamp in seconds
                    expiresIn:
                      type: number
                      description: JWT expiration timestamp in seconds
                    scopes:
                      description: JWT scopes
                      allOf:
                        - *ref_2
                    mode:
                      description: Mode in which this token is resctricted
                      example: test
                      type: string
                      enum: *ref_3
                  required:
                    - id
                    - companyId
                    - jwtId
                    - audience
                    - issuedAt
                    - expiresIn
                    - mode
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema: *ref_1
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - accesstoken
      security:
        - bearer: []
  /accesstoken/{id}:
    patch:
      operationId: AccessTokensController_update
      summary: 'Return JWT token and payload - Scope : accesstoken:update_one'
      description: Update Access Token scoped to a given company
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: mode
          required: true
          in: query
          description: Restrict mode in which token can be used
          schema:
            enum:
              - live
              - test
            type: string
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Custom scopes that will be contained in JWT
        content:
          application/json:
            schema: *ref_2
      responses:
        '200':
          description: JWT token and payload
          content:
            application/json:
              schema: *ref_4
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema: *ref_1
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - accesstoken
      security:
        - bearer: []
    get:
      operationId: AccessTokensController_findById
      summary: 'Return access token - Scope : accesstoken:read_one'
      description: Find an Access Token by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Access token
          content:
            application/json:
              schema: *ref_5
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema: *ref_1
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - accesstoken
      security:
        - bearer: []
    delete:
      operationId: AccessTokensController_delete
      summary: 'Return token id - Scope : accesstoken:delete_one'
      description: Revoke Access Token scoped to a given company
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Access token id
          content:
            application/json:
              schema:
                type: string
                description: token id
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema: *ref_1
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - accesstoken
      security:
        - bearer: []
  /companies:
    post:
      operationId: CompaniesController_create
      summary: 'Request the creation of a company - Scope : companies:create_one'
      description: Request creation of a company
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema: &ref_7
              type: object
              properties:
                name:
                  type: string
                  description: Company's name
                  example: AwesomeCompany GMBH
                vatId:
                  type: string
                  description: Company's VAT ID
                  example:
                    - ATU74488404
                    - ATU68525508
                    - ATU72126558
                address:
                  description: Company's address
                  allOf:
                    - &ref_41
                      type: object
                      properties:
                        country:
                          type: string
                          description: Country ISO code
                          example: AT
                        street:
                          type: string
                          description: Street
                          example: 110th Street
                        city:
                          type: string
                          description: City
                          example: Vienna
                        zipCode:
                          type: string
                          description: ZipCode
                          example: '1030'
                      required:
                        - country
                        - street
                        - city
                        - zipCode
              required:
                - name
                - vatId
                - address
      responses:
        '201':
          description: Company created
          content:
            application/json:
              schema: &ref_6
                $ref: '#/components/schemas/CompanyDto'
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - companies
      security:
        - bearer: []
    get:
      operationId: CompaniesController_readAll
      summary: 'Find the list of companies - Scope : companies:read_many'
      description: This method returns a list of all companies owned by current user
      parameters: []
      responses:
        '200':
          description: List of companies already created
          content:
            application/json:
              schema:
                type: array
                items: *ref_6
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - companies
      security:
        - bearer: []
  /companies/{id}:
    get:
      operationId: CompaniesController_findById
      summary: 'Find a company by Id - Scope : companies:read_one'
      description: Find a company by Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Company found
          content:
            application/json:
              schema: *ref_6
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - companies
      security:
        - bearer: []
    patch:
      operationId: CompaniesController_updateById
      summary: 'Update a company - Scope : companies:update_one'
      description: Update a company instance.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCompanyDto'
      responses:
        '200':
          description: Updated company
          content:
            application/json:
              schema: *ref_6
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Company not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - companies
      security:
        - bearer: []
    delete:
      operationId: CompaniesController_deleteOne
      summary: 'Remove a company - Scope : companies:delete_one'
      description: Remove a company
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Company deleted
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - companies
      security:
        - bearer: []
  /companies/{id}/member:
    patch:
      operationId: CompaniesController_addMember
      summary: 'Add company member - Scope : companies:update_one'
      description: Add a company member.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                member:
                  description: User's email to add or remove
                  type: string
              required:
                - member
      responses:
        '200':
          description: Updated company with members list
          content:
            application/json:
              schema: *ref_6
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Company or user not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - companies
      security:
        - bearer: []
    delete:
      operationId: CompaniesController_delMember
      summary: 'Remove company member - Scope : companies:update_one'
      description: Remove a company member.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                member:
                  description: User's email to add or remove
                  type: string
              required:
                - member
      responses:
        '200':
          description: Updated company with members list
          content:
            application/json:
              schema: *ref_6
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Company or user not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - companies
      security:
        - bearer: []
  /companies/{id}/wallet:
    get:
      operationId: CompaniesController_findWallet
      summary: 'Find a company''s wallet - Scope : companies:read_one'
      description: Find a company's wallet
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: mode
          required: true
          in: query
          description: Request wallet from the specified mode
          schema:
            enum:
              - live
              - test
            type: string
      responses:
        '200':
          description: Wallet found
          content:
            application/json:
              schema: &ref_13
                $ref: '#/components/schemas/WalletDto'
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '406':
          description: Invalid mode
          content:
            application/json:
              schema: *ref_1
      tags:
        - companies
      security:
        - bearer: []
  /companies/validate:
    post:
      operationId: CompaniesController_validate
      summary: 'Find the list of companies - Scope : companies:validate_one'
      description: This method allows to validate a company profile before creation
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema: *ref_7
      responses:
        '200':
          description: Company profile validated and prefilled
          content:
            application/json:
              schema: *ref_7
        '400':
          description: Body is invalid or VAT is invalid
          content:
            application/json:
              schema: *ref_1
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - companies
      security:
        - bearer: []
  /users:
    post:
      operationId: UsersController_create
      summary: 'Register a user - Scope : users:create_one'
      description: Request creation of a user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema: &ref_42
              type: object
              properties:
                username:
                  type: string
                  description: User's name
                email:
                  type: string
                  description: User email address
                  format: email
                password:
                  type: string
                  description: User's password
                  minLength: 8
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema: &ref_8
                $ref: '#/components/schemas/UserResponseDto'
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '406':
          description: Invalid password
          content:
            application/json:
              schema: *ref_1
        '409':
          description: User already created
          content:
            application/json:
              schema: *ref_1
      tags:
        - users
    get:
      operationId: UsersController_readAll
      summary: 'Find the list of users - Scope : users:read_many'
      description: This method returns a list of all users.
      parameters: []
      responses:
        '200':
          description: List of users already created
          content:
            application/json:
              schema:
                type: array
                items: *ref_8
        '403':
          description: Forbidden Resources
      tags:
        - users
      security:
        - bearer: []
  /users/confirm-email:
    get:
      operationId: UsersController_confirmEmail
      summary: Confirm user registration
      description: Confirm user registration
      parameters:
        - name: token
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Redirected
        '401':
          description: Invalid token used
          content:
            application/json:
              schema: *ref_1
      tags:
        - users
  /users/verify-email/{email}:
    get:
      operationId: UsersController_sendConfirmationEmail
      summary: Request confirmation email
      description: Request another confirmation email
      parameters:
        - name: email
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Confirmation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Instance not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - users
      security:
        - bearer: []
  /users/reset-password/{email}:
    get:
      operationId: UsersController_sendRestPasswordEmail
      summary: Request reset password email
      description: Request reset password email
      parameters:
        - name: email
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Confirmation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Instance not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - users
  /users/reset:
    get:
      operationId: UsersController_redirectToResetPassword
      summary: Redirect user to reset page
      description: Redirect user to reset page from reset-password mail
      parameters:
        - name: token
          required: true
          in: query
          schema:
            type: string
      responses:
        '302':
          description: Redirected
        '401':
          description: Invalid token used
          content:
            application/json:
              schema: *ref_1
      tags:
        - users
  /users/me:
    get:
      operationId: UsersController_findMe
      summary: 'Find a user by Id - Scope : users:read_one'
      description: Find a user by Id contained in JWT
      parameters: []
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema: *ref_8
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - users
      security:
        - bearer: []
  /users/{id}:
    get:
      operationId: UsersController_findById
      summary: 'Find a user by Id - Scope : users:read_one'
      description: Find a user by Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema: *ref_8
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Instance not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - users
      security:
        - bearer: []
    patch:
      operationId: UsersController_updateById
      summary: 'Update a user - Scope : users:update_one'
      description: Update a user instance.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema: *ref_8
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: User not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - users
      security:
        - bearer: []
    delete:
      operationId: UsersController_deleteOne
      summary: 'Remove a user - Scope : users:delete_one'
      description: Remove a user
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Instance not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - users
      security:
        - bearer: []
  /users/{id}/companies:
    get:
      operationId: UsersController_findCompanies
      summary: 'Find companies by user Id - Scope : users:read_one'
      description: Find companies where current user is member and owner
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Companies found
          content:
            application/json:
              schema:
                type: array
                items: *ref_6
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Instance not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - users
      security:
        - bearer: []
  /nodes:
    post:
      operationId: NodesControler_create
      summary: 'Register a new DLT node - Scope : nodes:create_one'
      description: Define a new node in the system
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema: &ref_43
              type: object
              properties:
                name:
                  type: string
                  description: Node name
                coinType:
                  type: number
                  description: BIP44 coin type, see SLIP44 registry for a complete list
                  example: 822
                  externalDocs:
                    url: >-
                      https://github.com/satoshilabs/slips/blob/master/slip-0044.md
                connectionUrl:
                  type: string
                  description: Node public URL
                  example: https://x-node.com
              required:
                - name
                - coinType
                - connectionUrl
      responses:
        '201':
          description: Node registered
          content:
            application/json:
              schema: &ref_9
                type: object
                properties:
                  id:
                    type: string
                    description: Instance's unique id
                  createdAt:
                    type: string
                    description: Instance's creation date
                  updatedAt:
                    type: string
                    description: Instance's last update date
                  name:
                    type: string
                    description: Node name
                  coinType:
                    type: number
                    description: BIP44 coin type, see SLIP44 registry for a complete list
                    example: 822
                    externalDocs:
                      url: >-
                        https://github.com/satoshilabs/slips/blob/master/slip-0044.md
                  connectionUrl:
                    type: string
                    description: Node public URL
                    example: https://x-node.com
                  status:
                    description: Node status
                    example: active
                    type: string
                    enum: &ref_10
                      - active
                      - inactive
                required:
                  - id
                  - name
                  - coinType
                  - connectionUrl
                  - status
        '400':
          description: Unsupported coin type
          content:
            application/json:
              schema: *ref_1
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - nodes
      security:
        - bearer: []
    get:
      operationId: NodesControler_findAll
      summary: 'Find all registered node - Scope : nodes:read_many'
      description: Returns a list of all registered dlt nodes
      parameters:
        - name: coinType
          required: false
          in: query
          description: BIP44 coin type, see SLIP44 registry for a complete list
          schema:
            type: number
            enum:
              - 822
              - 100000000
      responses:
        '200':
          description: The list of nodes already registered
          content:
            application/json:
              schema:
                type: array
                items: *ref_9
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - nodes
      security:
        - bearer: []
  /nodes/{id}:
    put:
      operationId: NodesControler_updateById
      summary: 'Update a DLT node - Scope : nodes:update_one'
      description: Update a node from the system
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: company
          in: header
          description: Current company selected
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &ref_44
              type: object
              properties:
                name:
                  type: string
                  description: Node name
                connectionUrl:
                  type: string
                  description: Node public URL
                  example: https://x-node.com
                status:
                  description: Node status
                  example: active
                  type: string
                  enum: *ref_10
              required:
                - name
                - connectionUrl
                - status
      responses:
        '200':
          description: Node updated
          content:
            application/json:
              schema: *ref_9
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - nodes
      security:
        - bearer: []
    delete:
      operationId: NodesControler_deleteById
      summary: 'Remove a DLT node - Scope : nodes:delete_one'
      description: Remove a node from the system
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: company
          in: header
          description: Current company selected
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Node deleted
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - nodes
      security:
        - bearer: []
  /identities:
    post:
      operationId: IdentitiesController_create
      summary: 'Create an identity - Scope : identities:create_one'
      description: Request creation of a digital identity
      parameters:
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIdentityDto'
      responses:
        '201':
          description: Identity created
          content:
            application/json:
              schema: &ref_11
                $ref: '#/components/schemas/IdentityDto'
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '409':
          description: Conflict, identity already exists
          content:
            application/json:
              schema: *ref_1
      tags:
        - identities
      security:
        - bearer: []
    get:
      operationId: IdentitiesController_find
      summary: 'Find the list of identities - Scope : identities:read_many'
      description: >-
        This method returns a list of all identities for the company specified
        in header.
      parameters:
        - name: coinType
          required: false
          in: query
          description: BIP44 coin type, see SLIP44 registry for a complete list
          schema:
            type: number
            enum:
              - 822
              - 100000000
        - name: account
          required: false
          in: query
          description: BIP44 account
          schema:
            type: number
        - name: index
          required: false
          in: query
          description: BIP44 index
          schema:
            type: number
        - name: status
          required: false
          in: query
          description: Identity status
          schema:
            type: string
            enum:
              - valid
              - obsolete
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of identities already created
          content:
            application/json:
              schema:
                type: array
                items: *ref_11
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Instance not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - identities
      security:
        - bearer: []
  /identities/{id}:
    get:
      operationId: IdentitiesController_findById
      summary: 'Find an identity by Id - Scope : identities:read_one'
      description: Find an identity by Id.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Identity found
          content:
            application/json:
              schema: *ref_11
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Instance not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - identities
      security:
        - bearer: []
  /identities/{id}/did:
    get:
      operationId: IdentitiesController_getDidDoc
      summary: Return DID doc
      description: Generate / retrieve identity's DID doc
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      responses:
        '200':
          description: DID Doc containing identity credentials
          content:
            application/json:
              schema: &ref_32
                type: object
                properties:
                  '@context':
                    description: DID Doc context
                    example:
                      - https://w3id.org/did/v0.11
                    type: array
                    items:
                      type: string
                  id:
                    type: string
                    description: DID controller Id
                    example: did:key:z6MkoQSb6frUdZw78QEGSKfaJ5d9Bd9WHyTqqVJtnXWMDbPP
                  publicKey:
                    description: DID public key array
                    type: array
                    items: &ref_30
                      type: object
                      properties:
                        id:
                          type: string
                          description: DID with fragment
                          example: >-
                            did:key:z6MkoQSb6frUdZw78QEGSKfaJ5d9Bd9WHyTqqVJtnXWMDbPP#z6MkoQSb6frUdZw78QEGSKfaJ5d9Bd9WHyTqqVJtnXWMDbPP
                        type:
                          type: string
                          description: Public key type
                          example: Ed25519VerificationKey2018
                        controller:
                          type: string
                          description: Controller public key encoded to base58
                          example: 9xBYWRc3J2Se1uPZkkhjSz59N3set6DV9UPxxFYLJNc1
                        publicKeyBase58:
                          type: string
                          description: Public key encoded to base58
                          example: 9xBYWRc3J2Se1uPZkkhjSz59N3set6DV9UPxxFYLJNc1
                        publicKeyBase64:
                          type: string
                          description: Public key encoded to base64
                      required:
                        - id
                        - type
                        - controller
                        - publicKeyBase58
                  authentication:
                    description: DID array
                    example:
                      - >-
                        did:key:z6MkoQSb6frUdZw78QEGSKfaJ5d9Bd9WHyTqqVJtnXWMDbPP#z6MkoQSb6frUdZw78QEGSKfaJ5d9Bd9WHyTqqVJtnXWMDbPP
                    type: array
                    items:
                      type: string
                  assertionMethod:
                    description: DID array
                    example:
                      - >-
                        did:key:z6MkoQSb6frUdZw78QEGSKfaJ5d9Bd9WHyTqqVJtnXWMDbPP#z6MkoQSb6frUdZw78QEGSKfaJ5d9Bd9WHyTqqVJtnXWMDbPP
                    type: array
                    items:
                      type: string
                  capabilityDelegation:
                    description: DID array
                    example:
                      - >-
                        did:key:z6MkoQSb6frUdZw78QEGSKfaJ5d9Bd9WHyTqqVJtnXWMDbPP#z6MkoQSb6frUdZw78QEGSKfaJ5d9Bd9WHyTqqVJtnXWMDbPP
                    type: array
                    items:
                      type: string
                  capabilityInvocation:
                    description: DID array
                    example:
                      - >-
                        did:key:z6MkoQSb6frUdZw78QEGSKfaJ5d9Bd9WHyTqqVJtnXWMDbPP#z6MkoQSb6frUdZw78QEGSKfaJ5d9Bd9WHyTqqVJtnXWMDbPP
                    type: array
                    items:
                      type: string
                  keyAgreement:
                    description: DID public key array
                    type: array
                    items: &ref_31
                      type: object
                      properties:
                        id:
                          type: string
                          description: DID with fragment
                          example: >-
                            did:key:z6MkoQSb6frUdZw78QEGSKfaJ5d9Bd9WHyTqqVJtnXWMDbPP#z6LSg6RTaG7Bw9J3NxFuDARkUkjWAuLvMguqH9U4oucrC5PY
                        type:
                          type: string
                          description: Public key type
                          example: X25519KeyAgreementKey2019
                        controller:
                          type: string
                          description: Controller public key encoded to base58
                          example: 9xBYWRc3J2Se1uPZkkhjSz59N3set6DV9UPxxFYLJNc1
                        publicKeyBase58:
                          type: string
                          description: Public key encoded to base58
                          example: 9xBYWRc3J2Se1uPZkkhjSz59N3set6DV9UPxxFYLJNc1
                        publicKeyBase64:
                          type: string
                          description: Public key encoded to base64
                      required:
                        - id
                        - type
                        - controller
                        - publicKeyBase58
                required:
                  - '@context'
                  - id
                  - publicKey
                  - authentication
                  - assertionMethod
                  - capabilityDelegation
                  - capabilityInvocation
                  - keyAgreement
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Instance not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - identities
      security:
        - bearer: []
  /cointypes:
    post:
      operationId: CoinTypesController_create
      summary: 'Add support for new coin type - Scope : cointypes:create_one'
      description: Add support for new coin type
      parameters:
        - name: audience
          in: header
          description: Auth service audience
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &ref_45
              type: object
              properties:
                bip44Id:
                  type: number
                  description: the bip44 id of the newly supported cointype
                  example: 822
              required:
                - bip44Id
      responses:
        '201':
          description: Coin type created
          content:
            application/json:
              schema: &ref_12
                type: object
                properties:
                  id:
                    type: string
                    description: Instance's unique id
                  createdAt:
                    type: string
                    description: Instance's creation date
                  updatedAt:
                    type: string
                    description: Instance's last update date
                  bip44Id:
                    type: number
                    description: the bip44 id of the supported cointype
                    example: 822
                    externalDocs:
                      url: >-
                        https://github.com/satoshilabs/slips/blob/master/slip-0044.md
                  status:
                    description: the cointype status
                    example: active
                    type: string
                    enum: &ref_46
                      - active
                      - inactive
                required:
                  - id
                  - bip44Id
                  - status
        '400':
          description: Unsupported coin type
          content:
            application/json:
              schema: *ref_1
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - cointypes
      security:
        - bearer: []
    get:
      operationId: CoinTypesController_findAll
      summary: 'Get all supported coin types - Scope : cointypes:read_many'
      description: Get all supported coin types
      parameters:
        - name: audience
          in: header
          description: Auth service audience
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The list of coin types already registered
          content:
            application/json:
              schema:
                type: array
                items:
                  type: number
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - cointypes
      security:
        - bearer: []
  /cointypes/{coinType}:
    patch:
      operationId: CoinTypesController_toggleStatus
      summary: 'Toggle status of the coin type - Scope : cointypes:update_one'
      description: Toggle status of the coin type (active/inactive)
      parameters:
        - name: coinType
          required: true
          in: path
          schema:
            type: number
        - name: audience
          in: header
          description: Auth service audience
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Updated coin type
          content:
            application/json:
              schema: *ref_12
        '400':
          description: Unsupported coin type
          content:
            application/json:
              schema: *ref_1
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Coin type not found
          content:
            application/json:
              schema: *ref_1
        '406':
          description: Unacceptable coin type param
          content:
            application/json:
              schema: *ref_1
      tags:
        - cointypes
      security:
        - bearer: []
    get:
      operationId: CoinTypesController_findOne
      summary: 'Find one supported coin type - Scope : cointypes:read_one'
      description: Find one supported coin type
      parameters:
        - name: coinType
          required: true
          in: path
          schema:
            type: number
        - name: audience
          in: header
          description: Auth service audience
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The retrieved coin type already registered
          content:
            application/json:
              schema: *ref_12
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - cointypes
      security:
        - bearer: []
    delete:
      operationId: CoinTypesController_deleteOne
      summary: 'Remove a cointype - Scope : cointypes:delete_one'
      description: Remove a supported cointype from the system
      parameters:
        - name: coinType
          required: true
          in: path
          schema:
            type: number
        - name: audience
          in: header
          description: Auth service audience
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Cointype deleted
          content:
            application/json:
              schema:
                type: number
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - cointypes
      security:
        - bearer: []
  /wallet:
    post:
      operationId: WalletsController_create
      summary: 'Create a wallet - Scope : wallet:create_one'
      description: Create  wallet with a mnemonic phrase and seed compatible with BIP39
      parameters:
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &ref_48
              type: object
              properties:
                name:
                  type: string
                  description: Wallet label
                options:
                  description: Masterkey creation options
                  allOf:
                    - &ref_47
                      type: object
                      properties:
                        language:
                          type: string
                          description: Language used to generate mnemonic phrase
                          default: english
                        password:
                          type: string
                          description: Password used to generate seed
                      required:
                        - language
                        - password
              required:
                - name
                - options
      responses:
        '201':
          description: Valid mnemonic phrase and created wallet metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  wallet: *ref_13
                  masterKey: &ref_14
                    type: object
                    properties:
                      mnemonic:
                        type: string
                        description: Mnemonic phrase used to generate seed
                        example: >-
                          dignity pass list indicate nasty swamp pool script
                          soccer toe leaf photo multiply desk host tomato cradle
                          drill spread actor shine dismiss champion exotic
                      seedHex:
                        type: string
                        description: Seed generated / recovered
                        example: >-
                          ecf9632e864630c00be4ca3d752d4f19a852cd628d9bbc3309a4c1a2f39801461a6816ca52793ddd3dacb242e207ad48e8bfde3afd0e8f978ad0e8cc4dd276c1
                      language:
                        type: string
                        description: Language used to generate mnemonic
                    required:
                      - mnemonic
                      - seedHex
                required:
                  - wallet
                  - masterKey
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema: *ref_1
        '409':
          description: Conflict, wallet already registered
          content:
            application/json:
              schema: *ref_1
      tags:
        - wallet
      security:
        - bearer: []
  /wallet/{id}:
    get:
      operationId: WalletsController_findById
      summary: 'Find a wallet by Id - Scope : wallet:read_one'
      description: Find a wallet by Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Wallet found
          content:
            application/json:
              schema: *ref_13
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Instance not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - wallet
      security:
        - bearer: []
    patch:
      operationId: WalletsController_updateById
      summary: 'Update a wallet - Scope : wallet:update_one'
      description: Update a wallet instance.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &ref_49
              type: object
              properties:
                name:
                  type: string
                connectionUrl:
                  type: string
      responses:
        '200':
          description: Updated wallet
          content:
            application/json:
              schema: *ref_13
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Instance not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - wallet
      security:
        - bearer: []
    delete:
      operationId: WalletsController_wipe
      summary: 'Wipe the master key from the wallet - Scope : wallet:delete_one'
      description: >-
        Wipe the master key from the remote wallet. ! Danger Zone, it will
        render all identities created obsolete
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Wallet metadata
          content:
            application/json:
              schema: *ref_13
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Instance not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - wallet
      security:
        - bearer: []
  /wallet/{id}/identities:
    get:
      operationId: WalletsController_findWalletIdentities
      summary: 'Find identities by wallet Id - Scope : wallet:read_one'
      description: Find identities by wallet Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Identities found
          content:
            application/json:
              schema:
                type: array
                items: *ref_11
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Instance not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - wallet
      security:
        - bearer: []
  /wallet/{id}/address:
    patch:
      operationId: WalletsController_getAddress
      summary: 'Generate a wallet address - Scope : wallet:read_one'
      description: Generate a wallet address from a BIP44 derivation path
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetDerivedAddressOptionsDto'
      responses:
        '200':
          description: Public key encoded for a given coin type address
          content:
            application/json:
              schema:
                type: object
                properties:
                  publicKey:
                    type: string
                  did:
                    type: string
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Instance not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - wallet
      security:
        - bearer: []
  /wallet/{id}/backup:
    patch:
      operationId: WalletsController_backup
      summary: >-
        Display the mnemonic attached to a given wallet. - Scope :
        wallet:update_one
      description: >-
        Display the mnemonic attached to a given wallet. Can be displayed only
        once.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Recovered masterkey and wallet metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  wallet: *ref_13
                  masterKey: *ref_14
                required:
                  - wallet
                  - masterKey
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Instance not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - wallet
      security:
        - bearer: []
  /wallet/{id}/recover:
    patch:
      operationId: WalletsController_recover
      summary: 'Recover a wallet from a mnemonic - Scope : wallet:update_one'
      description: >-
        Sends a mnemonic phrase to the server to recover the master key from the
        mnemonic phrase backup.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &ref_50
              type: object
              properties:
                mnemonic:
                  type: string
                  description: Mnemonic phrase used to generate seed
                  example: >-
                    dignity pass list indicate nasty swamp pool script soccer
                    toe leaf photo multiply desk host tomato cradle drill spread
                    actor shine dismiss champion exotic
                language:
                  type: string
                  description: Language used to generate mnemonic
                password:
                  type: string
                  description: Password used with mnemonic to recover seed
                connectionUrl:
                  type: string
                  description: Remote wallet bridge url, used in live mode
                  example: https://company-x.wallet.com
              required:
                - mnemonic
      responses:
        '200':
          description: Recovered masterkey and wallet metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  wallet: *ref_13
                  masterKey: *ref_14
                required:
                  - wallet
                  - masterKey
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Instance not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - wallet
      security:
        - bearer: []
  /transactions/sign:
    post:
      operationId: TransactionsController_signTransaction
      summary: 'Signs a transaction - Scope : transactions:sign'
      description: 'Signs a given transaction '
      parameters:
        - name: identity
          required: true
          in: query
          description: Identity id to use for signature
          schema:
            type: string
        - name: type
          required: false
          in: query
          description: Transaction type
          schema:
            enum:
              - transparent
              - opaque
              - stealth
            type: string
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Unsigned transaction instance matching coin type format
        content:
          application/json:
            schema:
              oneOf:
                - &ref_15
                  type: object
                  properties:
                    id:
                      type: string
                    inputs:
                      type: array
                      items: &ref_51
                        type: object
                        properties:
                          fulfillment:
                            type: string
                          fulfills:
                            oneOf:
                              - type: object
                                properties:
                                  output_index:
                                    type: number
                                  transaction_id:
                                    type: string
                              - type: string
                          owners_before:
                            type: array
                            items:
                              type: string
                        required:
                          - fulfillment
                          - fulfills
                          - owners_before
                    outputs:
                      type: array
                      items: &ref_52
                        type: object
                        properties:
                          amount:
                            type: string
                          condition:
                            type: array
                            items:
                              type: string
                          public_keys:
                            type: array
                            items:
                              type: string
                        required:
                          - amount
                          - condition
                          - public_keys
                    version:
                      type: string
                    metadata:
                      type: object
                    asset:
                      oneOf:
                        - type: object
                          properties:
                            data:
                              type: object
                        - type: object
                          properties:
                            id:
                              type: string
                    operation:
                      description: the transaction operation
                      example: CREATE
                      type: string
                      enum: &ref_53
                        - CREATE
                        - TRANSFER
                  required:
                    - id
                    - inputs
                    - outputs
                    - version
                    - metadata
                    - asset
                    - operation
                - &ref_16
                  type: object
                  properties:
                    chain_id:
                      type: number
                    data:
                      type: string
                    gas_limit:
                      type: number
                    gas_price:
                      type: number
                    nonce:
                      type: number
                    to:
                      type: string
                    tx_type:
                      type: number
                    value:
                      type: number
                  required:
                    - chain_id
                    - data
                    - gas_limit
                    - gas_price
                    - nonce
                    - to
                    - tx_type
                    - value
      responses:
        '200':
          description: Get signed transaction and coin type
          content:
            application/json:
              schema: &ref_17
                type: object
                properties:
                  signedTx:
                    type: object
                    description: Signed transaction
                  coinType:
                    type: number
                    description: the bip44 id of signed transaction
                    example: 822
                required:
                  - signedTx
                  - coinType
        '400':
          description: Unsupported coin type
          content:
            application/json:
              schema: *ref_1
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Coin type or identity not found
          content:
            application/json:
              schema: *ref_1
        '406':
          description: Unacceptable coin type param
          content:
            application/json:
              schema: *ref_1
      tags:
        - transactions
      security:
        - bearer: []
  /transactions/send:
    post:
      operationId: TransactionsController_sendTransaction
      summary: 'Send a signed transaction - Scope : transactions:send'
      description: Sends a signed transaction to the given Node
      parameters:
        - name: node
          required: false
          in: query
          description: Node id used as transaction's destination
          schema:
            type: string
        - name: coinType
          required: true
          in: query
          description: BIP44 coin type, see SLIP44 registry for a complete list
          schema:
            type: number
            enum:
              - 822
              - 100000000
            externalDocs:
              url: https://github.com/satoshilabs/slips/blob/master/slip-0044.md
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Signed transaction instance matching coin type format
        content:
          application/json:
            schema:
              oneOf:
                - *ref_15
                - *ref_16
      responses:
        '200':
          description: Get signed transaction and coin type
          content:
            application/json:
              schema: *ref_17
        '400':
          description: Unsupported coin type
          content:
            application/json:
              schema: *ref_1
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Coin type or identity not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - transactions
      security:
        - bearer: []
  /transactions:
    get:
      operationId: TransactionsController_findByCompany
      summary: 'Find the list of transactions - Scope : transactions:read_many'
      description: This method returns a list of all transactions .
      parameters:
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of transactions already created
          content:
            application/json:
              schema:
                type: array
                items: &ref_18
                  $ref: '#/components/schemas/TransactionDto'
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - transactions
      security:
        - bearer: []
  /transactions/ledger:
    get:
      operationId: TransactionsController_find
      summary: 'Find transactions by Legder - Scope : transactions:read_many'
      description: Find transactions from a specifed ledger ( coin type).
      parameters:
        - name: query
          required: false
          in: query
          description: Query transactions by text search (only works for coinType 822)
          schema:
            type: string
        - name: key
          required: false
          in: query
          description: Key used to refine search from assets or metadatas found
          schema:
            type: string
        - name: limit
          required: false
          in: query
          description: Transactions max count
          schema:
            type: number
        - name: coinType
          required: true
          in: query
          description: BIP44 coin type, see SLIP44 registry for a complete list
          schema:
            type: number
            enum:
              - 822
              - 100000000
            externalDocs:
              url: https://github.com/satoshilabs/slips/blob/master/slip-0044.md
      responses:
        '200':
          description: Transactions found
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Instance not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - transactions
      security:
        - bearer: []
  /transactions/{id}:
    get:
      operationId: TransactionsController_findById
      summary: 'Find transaction by Id - Scope : transactions:read_one'
      description: Find a transaction by Id.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transaction found
          content:
            application/json:
              schema: *ref_18
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Instance not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - transactions
      security:
        - bearer: []
  /certificates/schemas:
    get:
      operationId: CertificatesController_getSupportedSchemas
      summary: Get the list of supported schemas
      description: Get the list of supported certificates schemas
      parameters: []
      responses:
        '200':
          description: Get valid schemas and versions
          content:
            application/json:
              schema:
                type: object
                properties:
                  en10168-schemas:
                    type: array
                    items:
                      example: 0.0.3
                      type: string
                  e-coc-schemas:
                    type: array
                    items:
                      example: 0.0.2
                      type: string
                  plastic-schemas:
                    type: array
                    items:
                      example: 0.0.2
                      type: string
                  cdn-schemas:
                    type: array
                    items:
                      example: 0.0.2
                      type: string
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Certificate's schema not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - certificates
      security:
        - bearer: []
  /certificates/hash:
    post:
      operationId: CertificatesController_hashObject
      summary: Hash a JSON
      description: Hash a given object
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema: &ref_54
              type: object
              properties:
                algorithm:
                  default: sha256
                  description: Hash algorithm
                  example: sha256
                  type: string
                  enum: &ref_19
                    - sha256
                    - sha512
                    - sha3-256
                    - sha3-384
                    - sha3-512
                encoding:
                  default: hex
                  description: Hash encoding
                  example: hex
                  type: string
                  enum: &ref_20
                    - base64
                    - hex
                source:
                  type: object
                  description: JSON to hash
              required:
                - algorithm
                - source
      responses:
        '201':
          description: Hashed certificate and hashing parameters
          content:
            application/json:
              schema: &ref_21
                type: object
                properties:
                  algorithm:
                    default: sha256
                    description: Hash algorithm
                    example: sha256
                    type: string
                    enum: *ref_19
                  encoding:
                    default: hex
                    description: Hash encoding
                    example: hex
                    type: string
                    enum: *ref_20
                  value:
                    type: string
                    description: File hash
                required:
                  - algorithm
                  - value
        '400':
          description: Invalid certificate
          content:
            application/json:
              schema: *ref_1
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - certificates
      security:
        - bearer: []
  /certificates/hash-file:
    post:
      operationId: CertificatesController_hashFile
      summary: Hash a file
      description: Hash a given file
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: &ref_56
              type: object
              properties:
                algorithm:
                  default: sha256
                  description: Hash algorithm
                  example: sha256
                  type: string
                  enum: *ref_19
                encoding:
                  default: hex
                  description: Hash encoding
                  example: hex
                  type: string
                  enum: *ref_20
                file:
                  type: object
                  properties:
                    file:
                      description: File to hash
                      type: string
                      format: binary
                contentType:
                  description: Content type
                  example: json
                  default: json
                  type: string
                  enum: &ref_55
                    - json
                    - csv
              required:
                - algorithm
                - file
                - contentType
      responses:
        '201':
          description: Hashed certificate and hashing parameters
          content:
            application/json:
              schema: *ref_21
        '400':
          description: Invalid certificate
          content:
            application/json:
              schema: *ref_1
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - certificates
      security:
        - bearer: []
  /certificates/validate:
    post:
      operationId: CertificatesController_validateCertificate
      summary: 'Validate a certificate - Scope : certificates:validate_one'
      description: Validate a given certificate
      parameters: []
      requestBody:
        required: true
        description: Certificate to validate
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Get validated certificate
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Invalid certificate
          content:
            application/json:
              schema: *ref_1
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Certificate's schema not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - certificates
      security:
        - bearer: []
  /certificates/validate-file:
    post:
      operationId: CertificatesController_validateCertificateFile
      summary: 'Validate a certificate file - Scope : certificates:validate_one'
      description: Validate a given certificate file
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: &ref_22
              type: object
              properties:
                file:
                  type: object
                  properties:
                    file:
                      description: Certificate file
                      type: string
                      format: binary
              required:
                - file
      responses:
        '200':
          description: Get validated certificate
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Invalid certificate
          content:
            application/json:
              schema: *ref_1
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Certificate's schema not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - certificates
      security:
        - bearer: []
  /certificates/notarize:
    post:
      operationId: CertificatesController_notarize
      summary: 'Notarize a certificate object - Scope : certificates:notarize_one'
      description: Notarize a given certificate object
      parameters:
        - name: identity
          required: true
          in: query
          description: Digital identity used to sign the transaction
          schema:
            type: string
        - name: mode
          required: true
          in: query
          description: Use company wallet from the specified mode
          schema:
            enum:
              - live
              - test
            type: string
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Certificate to notarize
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: Notarization job confirmation
          content:
            application/json:
              schema: &ref_23
                type: object
                properties:
                  isNewInstance:
                    type: boolean
                    description: Indicate if the certificate was already notarized
                  timestamp:
                    format: date-time
                    type: string
                    description: Transaction or Job creation date
                  hash:
                    description: JSON Certificate hash
                    allOf:
                      - *ref_21
                  transactionId:
                    type: string
                    description: >-
                      Transaction id, returned if certificate was already
                      notarized
                  jobId:
                    description: Job id, returned if certificate was not already notarized
                    oneOf:
                      - type: string
                      - type: number
                required:
                  - isNewInstance
                  - timestamp
                  - hash
        '400':
          description: Invalid certificate
          content:
            application/json:
              schema: *ref_1
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - certificates
      security:
        - bearer: []
  /certificates/notarize-file:
    post:
      operationId: CertificatesController_notarizeFile
      summary: 'Notarize a certificate file - Scope : certificates:notarize_one'
      description: Notarize a given certificate file
      parameters:
        - name: identity
          required: true
          in: query
          description: Digital identity used to sign the transaction
          schema:
            type: string
        - name: mode
          required: true
          in: query
          description: Use company wallet from the specified mode
          schema:
            enum:
              - live
              - test
            type: string
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: *ref_22
      responses:
        '201':
          description: Notarization job confirmation
          content:
            application/json:
              schema: *ref_23
        '400':
          description: Invalid certificate
          content:
            application/json:
              schema: *ref_1
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - certificates
      security:
        - bearer: []
  /certificates/verify:
    post:
      operationId: CertificatesController_verify
      summary: 'Verify a certificate - Scope : certificates:validate_one'
      description: Verify a given certificate object
      parameters:
        - name: mode
          required: true
          in: query
          description: Request KM nodes from the specified mode
          schema:
            enum:
              - live
              - test
            type: string
      requestBody:
        required: true
        description: Certificate to render
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Get verification confirmation
          content:
            application/json:
              schema: &ref_24
                type: object
                properties:
                  isValid:
                    type: boolean
                    description: Indicate if the certificate was valid and notarized
                  hash:
                    description: JSON Certificate hash
                    allOf:
                      - *ref_21
                  timestamp:
                    format: date-time
                    type: string
                    description: Transaction creation date
                  transactionId:
                    type: string
                    description: >-
                      Transaction id, returned if certificate was already
                      notarized
                required:
                  - isValid
                  - hash
        '400':
          description: Invalid certificate
          content:
            application/json:
              schema: *ref_1
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - certificates
      security:
        - bearer: []
  /certificates/verify-file:
    post:
      operationId: CertificatesController_verifyFile
      summary: 'Verify a certificate - Scope : certificates:validate_one'
      description: Verify a given certificate file
      parameters:
        - name: mode
          required: true
          in: query
          description: Request KM nodes from the specified mode
          schema:
            enum:
              - live
              - test
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: *ref_22
      responses:
        '200':
          description: Get verification confirmation
          content:
            application/json:
              schema: *ref_24
        '400':
          description: Invalid certificate
          content:
            application/json:
              schema: *ref_1
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - certificates
      security:
        - bearer: []
  /certificates/render:
    post:
      operationId: CertificatesController_render
      summary: 'Render a certificate  - Scope : certificates:read_one'
      description: Render a given certificate from object
      parameters:
        - name: type
          required: true
          in: query
          description: Rendering type
          schema:
            enum:
              - html
              - pdf
            type: string
      requestBody:
        required: true
        description: Certificate to render
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Get rendered certificate
          content:
            application/pdf:
              schema:
                type: string
                format: binary
            text/html:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid certificate
          content:
            application/json:
              schema: *ref_1
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - certificates
      security:
        - bearer: []
  /certificates/render-file:
    post:
      operationId: CertificatesController_renderFile
      summary: 'Render a certificate  - Scope : certificates:read_one'
      description: Render a given certificate from file
      parameters:
        - name: type
          required: true
          in: query
          description: Rendering type
          schema:
            enum:
              - html
              - pdf
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: *ref_22
      responses:
        '200':
          description: Get rendered certificate
          content:
            application/pdf:
              schema:
                type: string
                format: binary
            text/html:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid certificate
          content:
            application/json:
              schema: *ref_1
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - certificates
      security:
        - bearer: []
  /hooks:
    post:
      operationId: HooksController_create
      summary: 'Request the creation of a hook - Scope : hooks:create_one'
      description: Request creation of a hook
      parameters:
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &ref_59
              type: object
              properties:
                secret:
                  type: string
                  description: User defined secre used to signed webhook
                  example: z6MkoQSb6frUdZw78QEGSKfaJ5d9Bd9WHyTqqVJtnXWMDbPP
                connectionUrl:
                  type: string
                  description: Url that will be called by the Pipe service
                  example: https://example.com/webhook
                contentType:
                  description: Content type that will be posted
                  example: application/json
                  default: application/json
                  type: string
                  enum: &ref_26
                    - application/json
                    - application/x-www-form-urlencoded
                status:
                  description: Hook's status
                  example: disabled
                  default: enabled
                  type: string
                  enum: &ref_27
                    - enabled
                    - disabled
                enableSSL:
                  type: boolean
                  description: Wether SSL will be verified
                  default: true
                scopes:
                  description: Resource and actions to watch for events creation
                  type: array
                  items: &ref_28
                    type: object
                    properties:
                      resource:
                        description: Scope resource
                        example: companies
                        type: string
                        enum: &ref_57
                          - health
                          - auth
                          - accesstoken
                          - sessions
                          - cointypes
                          - nodes
                          - masterkey
                          - wallet
                          - identities
                          - transactions
                          - users
                          - companies
                          - devices
                          - certificates
                          - plans
                          - subscriptions
                          - hooks
                          - events
                          - mailhooks
                          - mails
                      actions:
                        type: array
                        description: Actions allowed for a given Resource
                        example:
                          - create_one
                          - update_one
                        items: &ref_58
                          type: string
                          enum: &ref_60
                            - read_many
                            - read_one
                            - confirm
                            - create_many
                            - create_one
                            - delete_all
                            - delete_one
                            - notarize_many
                            - notarize_one
                            - partial_sign
                            - render_many
                            - render_one
                            - replace_many
                            - replace_one
                            - revoke
                            - reset
                            - send
                            - sign
                            - sign_in
                            - sign_out
                            - sign_up
                            - update_many
                            - update_one
                            - validate_many
                            - validate_one
                            - '*'
                    required:
                      - resource
                      - actions
              required:
                - connectionUrl
                - contentType
                - status
                - enableSSL
                - scopes
      responses:
        '201':
          description: Hook created
          content:
            application/json:
              schema: &ref_25
                $ref: '#/components/schemas/HookDto'
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - hooks
      security:
        - bearer: []
    get:
      operationId: HooksController_readAll
      summary: 'Find the list of hook - Scope : hooks:read_many'
      description: This method returns a list of all hooks for a company.
      parameters:
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of hooks already created
          content:
            application/json:
              schema:
                type: array
                items: *ref_25
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - hooks
      security:
        - bearer: []
  /hooks/{id}:
    get:
      operationId: HooksController_findById
      summary: 'Find a hook by Id - Scope : hooks:read_one'
      description: Find a hook by Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Hook found
          content:
            application/json:
              schema: *ref_25
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - hooks
      security:
        - bearer: []
    patch:
      operationId: HooksController_updateById
      summary: 'Update a hook - Scope : hooks:update_one'
      description: Update a hook instance.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &ref_61
              type: object
              properties:
                id:
                  type: string
                  description: Instance's unique id
                secret:
                  type: string
                  description: User defined secre used to signed webhook
                  example: z6MkoQSb6frUdZw78QEGSKfaJ5d9Bd9WHyTqqVJtnXWMDbPP
                connectionUrl:
                  type: string
                  description: Url that will be called by the Pipe service
                  example: https://example.com/webhook
                contentType:
                  description: Content type that will be posted
                  example: application/json
                  default: application/json
                  type: string
                  enum: *ref_26
                status:
                  description: Hook's status
                  example: disabled
                  default: enabled
                  type: string
                  enum: *ref_27
                enableSSL:
                  type: boolean
                  description: Wether SSL will be verified
                  default: true
                scopes:
                  description: Resource and actions to watch for events creation
                  type: array
                  items: *ref_28
              required:
                - id
                - connectionUrl
                - contentType
                - status
                - enableSSL
                - scopes
      responses:
        '200':
          description: Updated hook
          content:
            application/json:
              schema: *ref_25
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Hook not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - hooks
      security:
        - bearer: []
    delete:
      operationId: HooksController_deleteOne
      summary: 'Remove a hook - Scope : hooks:delete_one'
      description: Remove a hook
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      responses:
        '200':
          description: hook deleted
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - hooks
      security:
        - bearer: []
  /mailhooks:
    post:
      operationId: MailHooksController_create
      summary: 'Request the creation of a hook - Scope : mailhooks:create_one'
      description: Request creation of a hook
      parameters:
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &ref_62
              type: object
              properties:
                status:
                  description: Hook's status
                  example: disabled
                  default: enabled
                  type: string
                  enum: *ref_27
                scopes:
                  description: Resource and actions to watch for events creation
                  type: array
                  items: *ref_28
              required:
                - status
                - scopes
      responses:
        '201':
          description: Hook created
          content:
            application/json:
              schema: &ref_29
                $ref: '#/components/schemas/MailHookDto'
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - mailhooks
      security:
        - bearer: []
    get:
      operationId: MailHooksController_readAll
      summary: 'Find the list of hook - Scope : mailhooks:read_many'
      description: This method returns a list of all hooks for a company.
      parameters:
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of hooks already created
          content:
            application/json:
              schema:
                type: array
                items: *ref_29
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - mailhooks
      security:
        - bearer: []
  /mailhooks/{id}:
    get:
      operationId: MailHooksController_findById
      summary: 'Find a hook by Id - Scope : mailhooks:read_one'
      description: Find a hook by Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Hook found
          content:
            application/json:
              schema: *ref_29
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - mailhooks
      security:
        - bearer: []
    patch:
      operationId: MailHooksController_updateById
      summary: 'Update a hook - Scope : mailhooks:update_one'
      description: Update a hook instance.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &ref_67
              type: object
              properties:
                id:
                  type: string
                  description: Instance's unique id
                status:
                  description: Hook's status
                  example: disabled
                  default: enabled
                  type: string
                  enum: *ref_27
                scopes:
                  description: Resource and actions to watch for events creation
                  type: array
                  items: *ref_28
              required:
                - id
                - status
                - scopes
      responses:
        '200':
          description: Updated hook
          content:
            application/json:
              schema: *ref_29
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
        '404':
          description: Hook not found
          content:
            application/json:
              schema: *ref_1
      tags:
        - mailhooks
      security:
        - bearer: []
    delete:
      operationId: MailHooksController_deleteOne
      summary: 'Remove a hook - Scope : mailhooks:delete_one'
      description: Remove a hook
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: company
          in: header
          description: Current company selected
          required: true
          schema:
            type: string
      responses:
        '200':
          description: hook deleted
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Forbidden Resources
          content:
            application/json:
              schema: *ref_1
      tags:
        - mailhooks
      security:
        - bearer: []
  /mailhooks/webhooks:
    post:
      operationId: MailHooksController_handleWebhook
      summary: 'Handle SendGrid webhooks - Scope : mailhooks:validate_one'
      description: Handle SendGrid webhooks
      externalDocs:
        description: SendGrid docs
        url: https://app.sendgrid.com/settings/mail_settings
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema: &ref_68
              type: object
              properties: {}
      responses:
        '200':
          description: Successfully handled SendGrid webhook
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '403':
          description: Failed to verify webhook signature
          content:
            application/json:
              schema: *ref_1
      tags:
        - mailhooks
components:
  schemas:
    DidPublicKeyDto: *ref_30
    DidKeyAgreementDto: *ref_31
    DidDocDto: *ref_32
    SessionDto: *ref_0
    ErrorResponseDto: *ref_1
    AddressDto: &ref_33
      type: object
      properties:
        id:
          type: string
          description: Instance's unique id
        country:
          type: string
          description: Country ISO code
          example: AT
        street:
          type: string
          description: Street
          example: 110th Street
        city:
          type: string
          description: City
          example: Vienna
        zipCode:
          type: string
          description: ZipCode
          example: '1030'
      required:
        - id
        - country
        - street
        - city
        - zipCode
    UserRoles:
      type: string
      enum: &ref_34
        - USER
        - ADMIN
    UserStatus:
      type: string
      enum: &ref_35
        - active
        - inactive
    UserDto:
      type: object
      properties:
        id:
          type: string
          description: Instance's unique id
        createdAt:
          type: string
          description: Instance's creation date
        updatedAt:
          type: string
          description: Instance's last update date
        username:
          type: string
          description: User's name
        password:
          type: string
          description: User's hashed password
        email:
          type: string
          description: User email address
          format: email
        address:
          description: User's address
          allOf:
            - *ref_33
        role:
          description: User's role
          example: USER
          type: string
          enum: *ref_34
        status:
          description: User's status
          example: active
          type: string
          enum: *ref_35
        emailConfirmed:
          type: boolean
          description: User email has been confirmed
          default: false
        onBoarded:
          type: boolean
          description: User has been on boarded
          default: false
        companies:
          type: array
          description: User's companies
          items:
            oneOf:
              - *ref_6
              - type: string
        assignedCompanies:
          type: array
          description: User's assigned companies
          items:
            oneOf:
              - *ref_6
              - type: string
      required:
        - id
        - username
        - email
        - role
        - status
        - emailConfirmed
        - onBoarded
    CompanyDto:
      type: object
      properties:
        id:
          type: string
          description: Instance's unique id
        createdAt:
          type: string
          description: Instance's creation date
        updatedAt:
          type: string
          description: Instance's last update date
        name:
          type: string
          description: Company's name
          example: AwesomeCompany GMBH
        address:
          description: Company's address
          allOf:
            - *ref_33
        vatId:
          type: string
          description: Company's VAT ID
          example:
            - ATU74488404
            - ATU68525508
            - ATU72126558
        emails:
          description: Company's email
          example:
            - contact@awesomecompany.com
          default: []
          type: array
          items:
            type: string
        websites:
          description: Company's website
          example:
            - https://awesomecompany.com
          default: []
          type: array
          items:
            type: string
        accreditations:
          description: Company's accreditations urls
          default: []
          type: array
          items:
            type: string
        verified:
          type: boolean
          description: Company has been verified
        owner:
          description: Company's owner
          oneOf:
            - &ref_36
              $ref: '#/components/schemas/UserDto'
            - type: string
        members:
          type: array
          description: Company's members
          default: []
          items:
            oneOf:
              - *ref_36
              - type: string
        wallets:
          type: array
          description: Company's wallets
          default: []
          items:
            oneOf:
              - *ref_13
              - type: string
        transactions:
          type: array
          description: Company's transactions
          default: []
          items:
            oneOf:
              - *ref_18
              - type: string
      required:
        - id
        - name
        - address
        - vatId
        - verified
        - owner
        - members
    TokenScopesDto: *ref_2
    Modes:
      type: string
      enum: *ref_3
    InspectTokenDto:
      type: object
      properties:
        claim:
          type: string
          description: Encrypted content
        user:
          description: User's token
          allOf:
            - *ref_36
        company:
          description: Company's token
          allOf:
            - *ref_6
        iat:
          type: number
          description: Timestamp of issuance in seconds
        iss:
          type: string
          description: Issuer
        sub:
          type: string
          description: JWT subject
        exp:
          type: number
          description: Expires at timestamp in seconds
        aud:
          type: string
          description: JWT audience
        jti:
          type: string
          description: JWT id
        scopes:
          description: JWT scopes
          allOf:
            - *ref_2
        mode:
          description: Mode in which this token is resctricted
          example: test
          type: string
          enum: *ref_3
      required:
        - iat
        - iss
        - mode
    RevokedTokenDto: *ref_37
    AccessTokenResponseDto: *ref_4
    AccessTokenDto: *ref_5
    IdentityStatus:
      type: string
      enum: &ref_38
        - valid
        - obsolete
    IdentityDto:
      type: object
      properties:
        id:
          type: string
          description: Instance's unique id
        createdAt:
          type: string
          description: Instance's creation date
        updatedAt:
          type: string
          description: Instance's last update date
        did:
          type: string
          description: DID controller Id
          example: did:key:z6MkoQSb6frUdZw78QEGSKfaJ5d9Bd9WHyTqqVJtnXWMDbPP
        coinType:
          type: number
          description: SLIP44 coin type used for derivation path.
          example: 822
          externalDocs:
            url: https://github.com/satoshilabs/slips/blob/master/slip-0044.md
        account:
          type: number
          description: Account used for derivation path
          example: 234
          externalDocs:
            url: >-
              https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#Account
        index:
          type: number
          description: Index used for derivation path
          example: 234
          externalDocs:
            url: >-
              https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#index
        change:
          type: number
          description: Chain used for derivation path
          example: 0
          default: 0
          externalDocs:
            url: >-
              https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#change
        mode:
          description: Mode in which this identity is restricted
          example: test
          type: string
          enum: *ref_3
        status:
          description: Identity status bound to wallet status
          example: valid
          type: string
          enum: *ref_38
        wallet:
          description: Wallet generating keys for this identity
          oneOf:
            - *ref_13
            - type: string
        transactions:
          type: array
          description: Identity's transactions
          default: []
          items:
            oneOf:
              - *ref_18
              - type: string
      required:
        - id
        - did
        - coinType
        - account
        - index
        - mode
        - status
        - wallet
    TransactionType:
      type: string
      enum: &ref_39
        - transparent
        - opaque
        - stealth
    TransactionDto:
      type: object
      properties:
        id:
          type: string
          description: Instance's unique id
        createdAt:
          type: string
          description: Instance's creation date
        updatedAt:
          type: string
          description: Instance's last update date
        coinType:
          type: number
          description: BIP44 coin type, see SLIP44 registry for a complete list
          example: 822
          externalDocs:
            url: https://github.com/satoshilabs/slips/blob/master/slip-0044.md
        type:
          description: Transaction type
          example: opaque
          type: string
          enum: *ref_39
        transactionId:
          type: string
          description: Transactions's chain id
        signed:
          type: boolean
          description: Indicate if transaction's fully signed
        sent:
          type: boolean
          description: Indicate if transaction was sent to a node
        fulfillments:
          description: Inputs serialized fulfillements
          type: array
          items:
            type: string
        identities:
          type: array
          description: Transaction's creator identity
          items:
            oneOf:
              - *ref_11
              - type: string
        owner:
          description: Company of Transaction's creator
          oneOf:
            - *ref_6
            - type: string
      required:
        - id
        - coinType
        - type
        - identities
        - owner
    WalletStatus:
      type: string
      enum: &ref_40
        - enabled
        - disabled
    WalletDto:
      type: object
      properties:
        id:
          type: string
          description: Instance's unique id
        createdAt:
          type: string
          description: Instance's creation date
        updatedAt:
          type: string
          description: Instance's last update date
        name:
          type: string
          description: Wallet label
        connectionUrl:
          type: string
          description: Wallet bridge URL
          example: https://x-wallet.com
        backedUp:
          type: boolean
          description: Indicate if this wallet has been backed up
          default: false
        status:
          description: Wallet status
          example: disabled
          default: enabled
          type: string
          enum: *ref_40
        mode:
          description: Mode in which this wallet is restricted
          example: test
          type: string
          enum: *ref_3
        language:
          type: string
          description: Language used to initialize wallet
          default: english
        owner:
          description: Wallet's owner
          oneOf:
            - *ref_6
            - type: string
        identities:
          type: array
          description: Wallet's identities
          items:
            oneOf:
              - *ref_11
              - type: string
      required:
        - id
        - name
        - connectionUrl
        - backedUp
        - status
        - mode
        - owner
    CreateCompanyAddressDto: *ref_41
    CreateCompanyDto: *ref_7
    UpdateCompanyDto:
      type: object
      properties:
        name:
          type: string
          description: Company's name
          example: AwesomeCompany GMBH
        address:
          description: Company's address
          allOf:
            - *ref_33
        emails:
          description: Company's email
          example:
            - contact@awesomecompany.com
          default: []
          type: array
          items:
            type: string
        websites:
          description: Company's website
          example:
            - https://awesomecompany.com
          default: []
          type: array
          items:
            type: string
        accreditations:
          description: Company's accreditations urls
          default: []
          type: array
          items:
            type: string
        wallets:
          type: array
          description: Company's wallets
          default: []
          items:
            oneOf:
              - *ref_13
              - type: string
        transactions:
          type: array
          description: Company's transactions
          default: []
          items:
            oneOf:
              - *ref_18
              - type: string
      required:
        - name
        - address
    CreateUserDto: *ref_42
    UserResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Instance's unique id
        createdAt:
          type: string
          description: Instance's creation date
        updatedAt:
          type: string
          description: Instance's last update date
        username:
          type: string
          description: User's name
        email:
          type: string
          description: User email address
          format: email
        address:
          description: User's address
          allOf:
            - *ref_33
        role:
          description: User's role
          example: USER
          type: string
          enum: *ref_34
        status:
          description: User's status
          example: active
          type: string
          enum: *ref_35
        emailConfirmed:
          type: boolean
          description: User email has been confirmed
          default: false
        onBoarded:
          type: boolean
          description: User has been on boarded
          default: false
        companies:
          type: array
          description: User's companies
          items:
            oneOf:
              - *ref_6
              - type: string
        assignedCompanies:
          type: array
          description: User's assigned companies
          items:
            oneOf:
              - *ref_6
              - type: string
      required:
        - id
        - username
        - email
        - role
        - status
        - emailConfirmed
        - onBoarded
    UpdateUserDto:
      type: object
      properties:
        username:
          type: string
          description: User's name
        email:
          type: string
          description: User email address
          format: email
        address:
          description: User's address
          allOf:
            - *ref_33
        role:
          description: User's role
          example: USER
          type: string
          enum: *ref_34
        status:
          description: User's status
          example: active
          type: string
          enum: *ref_35
        onBoarded:
          type: boolean
          description: User has been on boarded
          default: false
        companies:
          type: array
          description: User's companies
          items:
            oneOf:
              - *ref_6
              - type: string
        assignedCompanies:
          type: array
          description: User's assigned companies
          items:
            oneOf:
              - *ref_6
              - type: string
      required:
        - username
        - email
        - role
        - status
        - onBoarded
    CreateNodeDto: *ref_43
    NodeStatus:
      type: string
      enum: *ref_10
    NodeDto: *ref_9
    UpdateNodeDto: *ref_44
    CreateIdentityDto:
      type: object
      properties:
        coinType:
          type: number
          description: SLIP44 coin type used for derivation path.
          example: 822
          externalDocs:
            url: https://github.com/satoshilabs/slips/blob/master/slip-0044.md
        account:
          type: number
          description: Account used for derivation path
          example: 234
          externalDocs:
            url: >-
              https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#Account
        index:
          type: number
          description: Index used for derivation path
          example: 234
          externalDocs:
            url: >-
              https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#index
        change:
          type: number
          description: Chain used for derivation path
          example: 0
          default: 0
          externalDocs:
            url: >-
              https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#change
        wallet:
          description: Wallet generating keys for this identity
          oneOf:
            - *ref_13
            - type: string
      required:
        - coinType
        - account
        - index
        - wallet
    CreateCoinTypeDto: *ref_45
    CoinTypeStatus:
      type: string
      enum: *ref_46
    CoinTypeDto: *ref_12
    CreateMasterKeyDto: *ref_47
    CreateWalletKeyDto: *ref_48
    UpdateWalletDto: *ref_49
    GetDerivedAddressOptionsDto:
      type: object
      properties:
        identity: *ref_11
        coinType:
          type: number
          description: SLIP44 coin type used for derivation path.
          example: 822
          externalDocs:
            url: https://github.com/satoshilabs/slips/blob/master/slip-0044.md
        account:
          type: number
          description: Account used for derivation path
          example: 234
          externalDocs:
            url: >-
              https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#Account
        chain:
          type: number
          description: Chain used for derivation path
          example: 0
          default: 0
          externalDocs:
            url: >-
              https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#chain
        index:
          type: number
          description: Index used for derivation path
          example: 234
          externalDocs:
            url: >-
              https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#index
        connectionUrl:
          type: string
          description: Remote wallet bridge url
          example: https://company-x.wallet.com
      required:
        - identity
    RecoverMasterKeyDto: *ref_50
    SignedTransactionDto: *ref_17
    MasterKeyDto: *ref_14
    BigChainTransactionInputDto: *ref_51
    BigChainTransactionOutputDto: *ref_52
    BigChainTransactionOperations:
      type: string
      enum: *ref_53
    BigChainTransactionDto: *ref_15
    EthereumTransactionDto: *ref_16
    HashAlgorithm:
      type: string
      enum: *ref_19
    HashEncoding:
      type: string
      enum: *ref_20
    HashObjectDto: *ref_54
    HashResponseDto: *ref_21
    FileType:
      type: string
      enum: *ref_55
    HashFileDto: *ref_56
    CertificateFileDto: *ref_22
    NotarizationDto: *ref_23
    VerificationDto: *ref_24
    HookContentType:
      type: string
      enum: *ref_26
    HookStatus:
      type: string
      enum: *ref_27
    Resources:
      type: string
      enum: *ref_57
    Actions: *ref_58
    HookScopeDto: *ref_28
    CreateHookDto: *ref_59
    HookDto:
      type: object
      properties:
        id:
          type: string
          description: Instance's unique id
        createdAt:
          type: string
          description: Instance's creation date
        updatedAt:
          type: string
          description: Instance's last update date
        secret:
          type: string
          description: User defined secre used to signed webhook
          example: z6MkoQSb6frUdZw78QEGSKfaJ5d9Bd9WHyTqqVJtnXWMDbPP
        connectionUrl:
          type: string
          description: Url that will be called by the Pipe service
          example: https://example.com/webhook
        contentType:
          description: Content type that will be posted
          example: application/json
          default: application/json
          type: string
          enum: *ref_26
        status:
          description: Hook's status
          example: disabled
          default: enabled
          type: string
          enum: *ref_27
        enableSSL:
          type: boolean
          description: Wether SSL will be verified
          default: true
        scopes:
          description: Resource and actions to watch for events creation
          type: array
          items: *ref_28
        owner:
          description: Hook's owner
          allOf:
            - *ref_6
        events:
          description: Hook's events
          type: array
          items:
            $ref: '#/components/schemas/EventDto'
      required:
        - id
        - connectionUrl
        - contentType
        - status
        - enableSSL
        - scopes
        - owner
    EventDto:
      type: object
      properties:
        id:
          type: string
          description: Instance's unique id
        createdAt:
          type: string
          description: Instance's creation date
        updatedAt:
          type: string
          description: Instance's last update date
        action:
          type: string
          enum: *ref_60
          description: Event's action
          example: create_one
        resource:
          description: Event's resource
          example: companies
          type: string
          enum: *ref_57
        payload:
          type: object
          description: Event's payload
        error:
          type: object
          description: Event's error
        delivered:
          type: boolean
          description: Wether event was delivered
        deliveryError:
          type: string
          description: Reasons why delivery failed
        hook:
          description: Event's hook
          allOf:
            - *ref_25
      required:
        - id
        - action
        - resource
        - payload
        - hook
    UpdateHookDto: *ref_61
    CreateMailHookDto: *ref_62
    MailContentType:
      type: string
      enum: &ref_63
        - text/html
        - text/plain
    MailContentDto: &ref_65
      type: object
      properties:
        value:
          type: string
          description: Mail's content value
        type:
          description: Mail's content type
          example: text/html
          type: string
          enum: *ref_63
      required:
        - value
        - type
    MailAttachmentContentType:
      type: string
      enum: &ref_64
        - application/json
        - application/pdf
        - image/jpeg
        - image/png
        - image/svg+xml
    MailAttachmentDto: &ref_66
      type: object
      properties:
        content:
          type: string
          description: Mail's attachment as base64 string
        filename:
          type: string
          description: Mail's attachment filename
        type:
          description: Mail's attachment content type
          example: application/json
          type: string
          enum: *ref_64
        disposition:
          type: string
          description: Mail's attachment disposition
        contentId:
          type: string
          description: Mail's attachment contentId to be used in templates
      required:
        - content
        - filename
    MailHookDto:
      type: object
      properties:
        id:
          type: string
          description: Instance's unique id
        createdAt:
          type: string
          description: Instance's creation date
        updatedAt:
          type: string
          description: Instance's last update date
        status:
          description: Hook's status
          example: disabled
          default: enabled
          type: string
          enum: *ref_27
        scopes:
          description: Resource and actions to watch for events creation
          type: array
          items: *ref_28
        owner:
          description: Hook's owner
          allOf:
            - *ref_6
        mails:
          description: Hook's mails
          type: array
          items:
            $ref: '#/components/schemas/MailDto'
      required:
        - id
        - status
        - scopes
        - owner
    MailDto:
      type: object
      properties:
        id:
          type: string
          description: Instance's unique id
        createdAt:
          type: string
          description: Instance's creation date
        updatedAt:
          type: string
          description: Instance's last update date
        action:
          type: string
          enum: *ref_60
          description: Mail's action
          example: create_one
        resource:
          description: Mail's resource
          example: companies
          type: string
          enum: *ref_57
        to:
          description: Mail's recipients
          type: array
          items:
            type: string
        cc:
          description: Mail's recipients
          type: array
          items:
            type: string
        from:
          type: string
          description: Mail's sender
        subject:
          type: string
          description: Mail's subject
        content:
          description: Mail's content
          type: array
          items: *ref_65
        attachments:
          description: Mail's attachments
          type: array
          items: *ref_66
        error:
          type: object
          description: Event's error
        delivered:
          type: boolean
          description: Wether event was delivered
        deliveryError:
          type: string
          description: Reasons why delivery failed
        hook:
          description: Mail's hook
          allOf:
            - *ref_29
      required:
        - id
        - action
        - resource
        - to
        - from
        - subject
        - content
        - hook
    UpdateMailHookDto: *ref_67
    Buffer: *ref_68
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    Authentication:
      type: apiKey
      in: cookie
      name: Authentication
    Refresh:
      type: apiKey
      in: cookie
      name: Refresh
